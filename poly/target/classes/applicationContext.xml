<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
               http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
               http://www.springframework.org/schema/context
               http://www.springframework.org/schema/context/spring-context-4.0.xsd
               http://www.springframework.org/schema/tx
               http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
               http://www.springframework.org/schema/aop
               http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
               http://www.springframework.org/schema/cache  
    		   http://www.springframework.org/schema/cache/spring-cache-4.0.xsd  
               ">
	<!-- 自动扫描 -->
    <context:component-scan base-package="com.poly" />
	<!-- Cache配置 -->  
    <cache:annotation-driven cache-manager="cacheManager" />  
    <bean id="ehCacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
    	<property name="configLocation" value="classpath:ehcache.xml"></property>
    </bean>
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
    	<property name="cacheManager" ref="ehCacheManagerFactory"></property>
    </bean>
	
	<!-- 引入并加载jdbc配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<!-- 此处加*表示只要在classpath(src)目录下都可以包括包里面 -->
				<value>classpath*:jdbc.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 配置数据源，使用druid数据源 -->
	<bean id="dataSource"
		class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init"
		destroy-method="close">
		
		<!-- Oracle数据库的驱动 -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<!-- 数据库的URL -->
		<property name="url" value="${jdbc.url}" />
		<!-- 指定数据库的用户名 -->
		<property name="username" value="${jdbc.username}" />
		<!-- 指定数据库的密码 -->
		<property name="password" value="${jdbc.pwd}" />
		
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1"></property>
		<property name="minIdle" value="1"></property>
		<property name="maxActive" value="20"></property>
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000"></property>
		
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->		
		<property name="timeBetweenEvictionRunsMillis" value="60000"></property>
		
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="30000"></property>
						
		<!-- 测试语句，testWhileIdle为true提高安全性，不影响性能 -->
		<property name="validationQuery" value="select 1"></property>
		<property name="testWhileIdle" value="true"></property>
		<property name="testOnBorrow" value="false"></property>
		<property name="testOnReturn" value="false"></property>
		
		<!-- 打开PSCache,并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true"></property>
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20"></property>
		
		<!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
		<property name="filters" value="stat"></property>
		
	</bean>
	
	<!-- 使用JDBC事物 -->  
    <bean id="myTxManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>
    
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis-config.xml" /> 
        <!-- 自动扫描mapping.xml文件
        <property name="mapperLocations" value="classpath:com/poly/entity/mapper/*.xml"></property>
    	 -->
    </bean>
	
	<!-- Dao接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.poly.*.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean> 
    
	
	<tx:advice id="txAdvice" transaction-manager="myTxManager">
		<tx:attributes>
			<tx:method name="paging*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="isExist*" propagation="REQUIRED" read-only="true" />
			<tx:method name="query*" propagation="REQUIRED" read-only="true" />
			<tx:method name="getByHQL*" propagation="REQUIRED" read-only="true" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="all*" propagation="REQUIRED" read-only="true" />
			<tx:method name="query*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="pagingList*" propagation="REQUIRED" />		
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut id="productServiceMethods" expression="execution(* com.poly..service.impl.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="productServiceMethods" />
	</aop:config>
	
	
</beans>